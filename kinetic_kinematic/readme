This repository contains jupyter notebooks used to process kinetic and kinematic data. There are two ways to process these data:

Method One: set up data stride by stride resulting in a matrix with 1196 strides. This is advantageous for training machine learning models because there is a larger number
of data points.

Method Two: average each subjects n strides at each time point together, resulting in a matrix with 96 total data points. 

1. Extract all stride data from Visual 3D. Store data in sepearate files for each subject and each timepoint.
2. Run kinetic_kinematic_resampling_to_101: resamples each stride to 101 data points, a traditional method in biomechanics research
3. Run kinetic_kinematic_metric_waveform_matrices to generate a matrix for each kinetic and kinematic metric. Within the notebook, adjust the file paths if you want to 
   use method one (strides) or method two (means). 
4. Run average_subject_strides to average each subjects strides into one waveform (necessary for method two). This may also be helpful for EMG data.
4. Run kinetic_kinematic_z_score_transform: a data transformation is necessary for PCA because joint angles and moments can be on different scales depending on the subject.
5. Run all_group_concatenator to concatenate each group (healthy, injured, recovered) into one matrix. This is necessary to run the principal component analysis because
   you need each group included in the matrix to generate PC scores.
6. Run kinetic_kinematic_PCA_individual_metric_strides (method one) or kinetic_kinematic_PCA_individual_metric_means (method two). Change the muscle of interest each time you run the script. It will output three
   matrices per muscle: principal component scores, explained variance for each PC, and the loadings. 

Once all these steps are complete, move to PFP_project/machine_learning to generate matrices of PC scores and run respective machine learning models.
